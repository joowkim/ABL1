import pandas as pd
import numpy as np
import os
import re
import itertools
from snakemake.utils import validate, min_version


## load configure info
configfile: "configs/configs.yaml"


#
# ref_fa = config['ref_full']['sequence']
# ref_fai = config['ref_full']['fai']
# gtf = config['ref_full']['annotation']
# bwa_index = config['ref_modi']['index']


## load sample info
# samplesheet="./samples.tsv"
# units = pd.read_table(samplesheet, dtype={"sample" : str, "sample_group" : str })


def get_sample_name():
    import glob
    sample_list = glob.glob("00.rawdata/*.fq")
    sample_name = [os.path.basename(i).split(".fq")[0] for i in
                   sample_list]
    return sample_name


rule all:
    input:
        # expand("analysis/04.samtools/{sample}.flagstats.tsv",sample=get_sample_name()),
        "analysis/05.multiqc/multiqc_report.html",


# rule demux:
#     input:
#     output:
#     shell:


rule fastqc:
    """
    Run fastqc on raw_data/files.
    """
    input:
        "00.rawdata/{fq_pref}.fq"
    output:
        html="analysis/01.fastqc/{fq_pref}_fastqc.html",
        zip="analysis/01.fastqc/{fq_pref}_fastqc.zip"
    params:
        outdir="analysis/01.fastqc/"
    log:
        stdout="logs/01.fastqc/{fq_pref}.o",
        stderr="logs/01.fastqc/{fq_pref}.e"
    threads: 1
    resources:
        mem_gb=8
    shell:
        """
        fastqc --outdir {params.outdir} {input}
        """


rule fastp:
    """
    Run fastp - this is a quality trimming step.
    """
    input:
        "00.rawdata/{sample}.fq"
    output:
        trimmed_fq_gz="analysis/02.fastp/{sample}.fq.gz",
        outjson="analysis/02.fastp/{sample}.fastp.json",
        outhtml="analysis/02.fastp/{sample}.fastp.html",
    log:
        stdout="logs/02.fastp/{sample}.o",
        stderr="logs/02.fastp/{sample}.e",
    threads: 4
    resources:
        mem_gb=8
    shell:
        """
        fastp -i {input} -o {output.trimmed_fq_gz} --average_qual 20 --json {output.outjson} --html {output.outhtml} --thread 3 --adapter_sequence GTAC
        """

rule bwa:
    """
    Run bwa-mem
    """
    input:
        fq=rules.fastp.output.trimmed_fq_gz,
        json=rules.fastp.output.outjson,
        html=rules.fastp.output.outhtml,
    output:
        outbam="analysis/03.bwamem/{sample}.bam",
        outbai="analysis/03.bwamem/{sample}.bam.bai",
        idxstat="analysis/03.bwamem/{sample}.bam.idxstat",
    params:
        prefix="{sample}",
        idx=config['ref_modi']['index'],
    log:
        stdout="logs/03.bwamem/{sample}.o",
        stderr="logs/03.bwamem/{sample}.e",
    threads: 4
    resources:
        mem_gb=20
    shell:
        """
        bwa mem {params.idx} {input.fq} | samtools sort -m 6G \
        -@ {threads} \
        -O "BAM" \
        -o {output.outbam} \

        samtools index -@ {threads} {output.outbam}
        samtools idxstats {output.outbam} > {output.idxstat}
        """


# rule bowtie2:
#     """
#     Run bowtie2
#     """
#     input:
#         fq=rules.fastp.output.trimmed_fq_gz,
#         json=rules.fastp.output.outjson,
#         html=rules.fastp.output.outhtml,
#     output:
#         outbam="analysis/03.bowtie2/{sample}.bam",
#         outbai="analysis/03.bowtie2/{sample}.bam.bai",
#         idxstat="analysis/03.bowtie2/{sample}.bam.idxstat",
#     params:
#         prefix="{sample}",
#         idx=config['ref_modi']['index'],
#     log:
#         stdout="logs/03.bowtie2/{sample}.o",
#         stderr="logs/03.bowtie2/{sample}.e",
#     threads: 4
#     resources:
#         mem_gb=20
#     shell:
#         """
#         bowtie2 -x {params.idx} -U {input.fq} | samtools sort -m 6G \
#         -@ {threads} \
#         -O "BAM" \
#         -o {output.outbam}
#
#         samtools index -@ {threads} {output.outbam}
#         samtools idxstats {output.outbam} > {output.idxstat}
#         """


rule samtools:
    """
    Make bam file stat
    """
    input:
        bam=rules.bwa.output.outbam,
        outbai=rules.bwa.output.outbai,
        idxstat=rules.bwa.output.idxstat,
    output:
        flagstat="analysis/04.samtools/{sample}.flagstats.tsv",
    log:
        stdout="logs/04.samtools/{sample}.o",
        stderr="logs/04.samtools/{sample}.e",
    threads: 4
    resources:
        mem_gb=4
    shell:
        """
        samtools flagstat -@ {threads} {input.bam} > {output.flagstat} 
        """

rule multiqc:
    """
    Run multiqc
    """
    input:
        expand("analysis/01.fastqc/{sample}_fastqc.html",sample=get_sample_name()),
        expand("analysis/01.fastqc/{sample}_fastqc.zip",sample=get_sample_name()),
        expand("analysis/02.fastp/{sample}.fastp.json",sample=get_sample_name()),
        expand("analysis/04.samtools/{sample}.flagstats.tsv",sample=get_sample_name()),
    output:
        "analysis/05.multiqc/multiqc_report.html",
    log:
        stdout="logs/05.multiqc/multiqc.o",
        stderr="logs/05.multiqc/multiqc.e",
    threads: 4
    resources:
        mem_gb=100
    shell:
        """
        multiqc -f {input} \
        -o analysis/05.multiqc \
        -n multiqc_report.html \
        --cl-config 'max_table_rows: 999999' \
        """
